############################################
Requirement 2
############################################
Write a report (1-2 pages of single-spaced, 10 point font) describing the ways in which our code could be restructured to better reflect the fundamental OO concepts of modularisation and encapsulation.

Include a discussion in that report of the extent to which you think that inheritance, abstract classes and interfaces might be used to improve our code. You may argue either for or against their inclusion.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The game has some obvious classes that could be considered such as a Board and Player class; a class to obtain information from the user/s would possibly be a good idea as well. At this stage I would rule out classes for counters as they are really just variables in a Board and player 1 & player 2 are really instances of the Player class, although a database of boards might be a nice idea to keep a history of games.

The usage of classes with appropriate methods should cut down on repeated code. At present in placeCounter(), each turn the same code is used twice to place a counter for either player 1 or player 2 with little variation (literally only the counter letters change); this could easily be condensed into a single iteration using parameters instead of fixed letters and be assigned to a board class as a method. In the playGame() method, the same checks are performed for winning horizontal and vertical lines, again differing only in the counter letter; these could be separated out into their own method, with the fixed character in the comparator once more being replaced by a variable.

getUserInput() could be expanded to perform checks for valid inputs, displaying feedback if a response is not valid and returning an int rather than performing parseInt inside the calling method; however, if we use getUserInput() for other extended features such as requesting usernames it may be best to wrap calls to it in other methods to perform the validations.

Unless different types of board or special counters are created I am not really sure there is much to gain from inheritance as the objects are quite distinct already and although they relate to one another, they do not pass the "object a 'is a' object b" test. A counter relates to a board but does not have squares or co-ordinates; similarly a board relates to a game but does not in itself have rules or settings. If we were to introduce different types of board (different dimensions, boards that fill bottom to top etc), we could use inheritance and polymorphism for aspects that stay the same such as printing the board out, but override methods that change so counters are added from the top down etc.

As the classes model I am envisioning is so flat I cannot see that abstract classes or interfaces would really help with the code. If we create more classes of board it may be beneficial to have an abstract board class that declares each sub board should have a 'move()' method and a 'checkForWin()' method as the code to implement these could be quite different, so it would be a waste of code to enter generic methods in the top level class and overwrite them every time; whereas PRINT STATEMENT SAME. Similarly if Connect4 were to be expanded out into a larger suite of board games with diffe

Game Class
    Parameters:
        *Rules
            inARow - how many need to be in a row
            horizontalWin - do horizontal rows count?
            verticalWin - do vertical rows count?
            diagonalWin - do diagonal rows count?
            allowWrapping - can rows wrap around top/bottom left/right?
        *Settings
            counterColours
            counterCharacters
            numPlayers


    Contains board, players

UI class
    editSettings()
    MakeMove()

Create user class
    name
    #wins

Create player class
    name
    playerNumber

Board Class
    Parameters:
        dimensions - dimensions of board
    checkWin()
    placeCounter()
    printBoard()



############################################
Suggestions for improvement
############################################
Implement 'play again?' logic
Implement the ability for the computer to start the game
Say which player wins
Colour in the counters